from collections import deque

def bfs(graph, start):
    visited = set()  # to keep track of visited nodes
    queue = deque([start])  # create a queue and enqueue the starting node

    while queue:
        node = queue.popleft()  # dequeue a node from the front of the queue
        if node not in visited:
            print(node)  # process the node (e.g., print it)
            visited.add(node)  # mark the node as visited

            # enqueue all adjacent nodes that haven't been visited
            neighbors = graph[node]
            for neighbor in neighbors:
                if neighbor not in visited:
                    queue.append(neighbor)


# Example usage:
graph = {}

# Take input from the user to build the graph
num_vertices = int(input("Enter the number of vertices: "))
for i in range(num_vertices):
    vertex = input(f"Enter vertex {i + 1}: ")
    adjacent_vertices = input(f"Enter adjacent vertices for {vertex} (comma-separated): ")
    graph[vertex] = adjacent_vertices.split(",")

start_node = input("Enter the starting node: ")

# Call the BFS function
print("BFS traversal:")
bfs(graph, start_node)

"""Enter the number of vertices: 5
Enter vertex 1: A
Enter adjacent vertices for A (comma-separated): B,C
Enter vertex 2: B
Enter adjacent vertices for B (comma-separated): A,C,D
Enter vertex 3: C
Enter adjacent vertices for C (comma-separated): A,B,D,E
Enter vertex 4: D
Enter adjacent vertices for D (comma-separated): B,C,E
Enter vertex 5: E
Enter adjacent vertices for E (comma-separated): C,D
Enter the starting node: A"""


DFS """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


def dfs(graph, start, visited):
    visited.add(start)
    print(start)  # process the node (e.g., print it)

    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)


# Example usage:
graph = {}

# Take input from the user to build the graph
num_vertices = int(input("Enter the number of vertices: "))
for i in range(num_vertices):
    vertex = input(f"Enter vertex {i + 1}: ")
    adjacent_vertices = input(f"Enter adjacent vertices for {vertex} (comma-separated): ")
    graph[vertex] = adjacent_vertices.split(",")

start_node = input("Enter the starting node: ")

# Call the DFS function
print("DFS traversal:")
visited = set()
dfs(graph, start_node, visited)
